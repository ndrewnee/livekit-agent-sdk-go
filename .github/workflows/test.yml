name: Test Suite

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    name: Build Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Build SDK
        run: go build ./pkg/...

      - name: Build Examples
        run: |
          for dir in examples/*/; do
            example_name=$(basename "$dir")

            # Skip publisher-hls-agent as it requires GStreamer
            if [ "$example_name" = "publisher-hls-agent" ]; then
              echo "Skipping $example_name (requires GStreamer)"
              continue
            fi

            if [ -f "$dir/go.mod" ]; then
              echo "Building $example_name..."
              (cd "$dir" && go build .) || echo "Failed to build $example_name"
            fi
          done

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Run Unit Tests
        run: go test ./pkg/... -v

  race-detection:
    name: Race Detection
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Run Tests with Race Detector
        run: go test -race ./pkg/... -timeout 30m
        env:
          GORACE: "history_size=7"

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Start LiveKit Server
        run: |
          docker run -d --rm \
            --name livekit-server \
            -p 7880:7880 \
            -p 7881:7881 \
            -p 7882:7882/udp \
            -e LIVEKIT_KEYS="devkey: secret" \
            livekit/livekit-server:latest \
            --dev \
            --bind 0.0.0.0
          echo "LiveKit server started in background"
          sleep 3

      - name: Wait for LiveKit server
        run: |
          echo "Waiting for LiveKit server to be ready..."
          for i in {1..30}; do
            # Check if server responds (even 401 means it's running)
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:7880/rtc/validate 2>/dev/null || echo "000")
            if [ "$HTTP_CODE" = "401" ] || [ "$HTTP_CODE" = "200" ]; then
              echo "LiveKit server is ready (HTTP $HTTP_CODE)"
              exit 0
            fi
            echo "Attempt $i: LiveKit server not ready yet (HTTP $HTTP_CODE)..."
            sleep 2
          done
          echo "LiveKit server failed to start"
          echo "=== Docker logs ==="
          docker logs livekit-server
          exit 1

      - name: Run Integration Tests
        run: go test -tags=integration ./pkg/... -v -timeout 1h

      - name: Stop LiveKit Server
        if: always()
        run: docker stop livekit-server || true

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Generate Coverage Report
        run: |
          go test -coverprofile=coverage.out ./pkg/...
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload Coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.html

      - name: Check Coverage Threshold
        run: |
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Total coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 40" | bc -l) )); then
            echo "Coverage is below 40% threshold"
            exit 1
          fi